
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package edu.uta.pcat;

import scala.collection.immutable.*;
import scala.Tuple2;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PcatParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public PcatParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PcatParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PcatParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\006\000\002\012" +
    "\006\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\002\000\002\046\003\000\002\003\010\000" +
    "\002\003\006\000\002\024\004\000\002\024\003\000\002" +
    "\025\005\000\002\025\003\000\002\044\003\000\002\004" +
    "\006\000\002\026\005\000\002\026\003\000\002\045\003" +
    "\000\002\005\011\000\002\005\007\000\002\027\005\000" +
    "\002\027\003\000\002\047\003\000\002\042\005\000\002" +
    "\042\005\000\002\031\004\000\002\031\003\000\002\010" +
    "\006\000\002\030\005\000\002\030\004\000\002\006\005" +
    "\000\002\032\005\000\002\032\003\000\002\015\006\000" +
    "\002\015\005\000\002\015\007\000\002\015\005\000\002" +
    "\015\012\000\002\015\011\000\002\015\010\000\002\015" +
    "\006\000\002\015\016\000\002\015\014\000\002\015\004" +
    "\000\002\015\005\000\002\015\004\000\002\021\004\000" +
    "\002\021\003\000\002\017\007\000\002\017\003\000\002" +
    "\016\003\000\002\016\002\000\002\040\005\000\002\040" +
    "\004\000\002\034\005\000\002\034\003\000\002\014\003" +
    "\000\002\014\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\005\000\002\013\004\000\002" +
    "\013\004\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\043\003\000\002\043\006" +
    "\000\002\043\005\000\002\033\005\000\002\033\003\000" +
    "\002\023\005\000\002\023\004\000\002\035\005\000\002" +
    "\035\003\000\002\041\005\000\002\037\004\000\002\037" +
    "\003\000\002\011\006\000\002\011\005\000\002\022\005" +
    "\000\002\022\004\000\002\036\005\000\002\036\003\000" +
    "\002\007\005\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\004\033\005\001\002\000\004\002\352\001" +
    "\002\000\004\024\006\001\002\000\012\012\ufffb\032\ufffb" +
    "\041\ufffb\042\ufffb\001\002\000\004\061\351\001\002\000" +
    "\012\012\013\032\012\041\014\042\011\001\002\000\004" +
    "\004\310\001\002\000\004\004\300\001\002\000\024\004" +
    "\051\021\044\022\046\023\050\025\047\034\043\036\055" +
    "\043\045\044\052\001\002\000\004\004\015\001\002\000" +
    "\004\024\023\001\002\000\014\010\ufff0\012\ufff0\032\ufff0" +
    "\041\ufff0\042\ufff0\001\002\000\014\010\021\012\ufff3\032" +
    "\ufff3\041\ufff3\042\ufff3\001\002\000\012\012\ufffd\032\ufffd" +
    "\041\ufffd\042\ufffd\001\002\000\004\004\015\001\002\000" +
    "\014\010\ufff1\012\ufff1\032\ufff1\041\ufff1\042\ufff1\001\002" +
    "\000\006\011\026\035\024\001\002\000\004\004\033\001" +
    "\002\000\004\061\032\001\002\000\004\030\027\001\002" +
    "\000\004\004\030\001\002\000\012\024\uffea\045\uffea\061" +
    "\uffea\065\uffea\001\002\000\004\061\uffe9\001\002\000\014" +
    "\010\ufff2\012\ufff2\032\ufff2\041\ufff2\042\ufff2\001\002\000" +
    "\004\060\040\001\002\000\006\004\uffe6\020\uffe6\001\002" +
    "\000\006\004\033\020\037\001\002\000\006\004\uffe7\020" +
    "\uffe7\001\002\000\004\061\uffe8\001\002\000\004\004\030" +
    "\001\002\000\004\061\042\001\002\000\006\004\uffe5\020" +
    "\uffe5\001\002\000\004\064\270\001\002\000\004\061\267" +
    "\001\002\000\016\004\064\006\066\007\067\027\065\047" +
    "\070\064\071\001\002\000\004\004\243\001\002\000\026" +
    "\004\051\020\uffcd\021\044\022\046\023\050\025\047\034" +
    "\043\036\055\043\045\044\052\001\002\000\016\004\064" +
    "\006\066\007\067\027\065\047\070\064\071\001\002\000" +
    "\012\045\uffaf\063\uffaf\064\137\066\uffaf\001\002\000\004" +
    "\064\204\001\002\000\034\004\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\025\uffd1\034\uffd1\036\uffd1" +
    "\043\uffd1\044\uffd1\061\uffd1\001\002\000\026\004\051\020" +
    "\202\021\044\022\046\023\050\025\047\034\043\036\055" +
    "\043\045\044\052\001\002\000\020\004\064\006\066\007" +
    "\067\027\065\047\070\061\176\064\071\001\002\000\010" +
    "\045\060\063\061\066\057\001\002\000\016\004\064\006" +
    "\066\007\067\027\065\047\070\064\071\001\002\000\016" +
    "\004\064\006\066\007\067\027\065\047\070\064\071\001" +
    "\002\000\004\004\062\001\002\000\072\004\uffad\010\uffad" +
    "\013\uffad\014\uffad\015\uffad\026\uffad\030\uffad\031\uffad\037" +
    "\uffad\040\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad" +
    "\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\061" +
    "\uffad\062\uffad\063\uffad\065\uffad\066\uffad\067\uffad\071\uffad" +
    "\001\002\000\070\004\uffc4\010\uffc4\013\uffc4\014\uffc4\015" +
    "\uffc4\026\uffc4\030\uffc4\031\uffc4\037\uffc4\040\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055" +
    "\uffc4\056\uffc4\057\uffc4\061\uffc4\062\uffc4\063\061\065\uffc4" +
    "\066\057\067\uffc4\071\uffc4\001\002\000\074\004\uffaf\010" +
    "\uffaf\013\uffaf\014\uffaf\015\uffaf\026\uffaf\030\uffaf\031\uffaf" +
    "\037\uffaf\040\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052" +
    "\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\061\uffaf" +
    "\062\uffaf\063\uffaf\064\137\065\uffaf\066\uffaf\067\uffaf\070" +
    "\134\071\uffaf\001\002\000\016\004\064\006\066\007\067" +
    "\027\065\047\070\064\071\001\002\000\064\004\uffc6\010" +
    "\uffc6\013\uffc6\014\uffc6\015\uffc6\026\uffc6\030\uffc6\031\uffc6" +
    "\037\uffc6\040\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\061\uffc6" +
    "\062\uffc6\065\uffc6\067\uffc6\071\uffc6\001\002\000\064\004" +
    "\uffc5\010\uffc5\013\uffc5\014\uffc5\015\uffc5\026\uffc5\030\uffc5" +
    "\031\uffc5\037\uffc5\040\uffc5\046\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5" +
    "\061\uffc5\062\uffc5\065\uffc5\067\uffc5\071\uffc5\001\002\000" +
    "\016\004\064\006\066\007\067\027\065\047\070\064\071" +
    "\001\002\000\016\004\064\006\066\007\067\027\065\047" +
    "\070\064\071\001\002\000\040\010\074\014\103\026\076" +
    "\031\110\046\102\047\073\050\105\051\075\052\107\053" +
    "\111\054\104\055\106\056\101\057\100\061\077\001\002" +
    "\000\016\004\064\006\066\007\067\027\065\047\070\064" +
    "\071\001\002\000\016\004\064\006\066\007\067\027\065" +
    "\047\070\064\071\001\002\000\016\004\064\006\066\007" +
    "\067\027\065\047\070\064\071\001\002\000\016\004\064" +
    "\006\066\007\067\027\065\047\070\064\071\001\002\000" +
    "\034\004\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\025\uffdf\034\uffdf\036\uffdf\043\uffdf\044\uffdf\061" +
    "\uffdf\001\002\000\016\004\064\006\066\007\067\027\065" +
    "\047\070\064\071\001\002\000\016\004\064\006\066\007" +
    "\067\027\065\047\070\064\071\001\002\000\016\004\064" +
    "\006\066\007\067\027\065\047\070\064\071\001\002\000" +
    "\016\004\064\006\066\007\067\027\065\047\070\064\071" +
    "\001\002\000\016\004\064\006\066\007\067\027\065\047" +
    "\070\064\071\001\002\000\016\004\064\006\066\007\067" +
    "\027\065\047\070\064\071\001\002\000\016\004\064\006" +
    "\066\007\067\027\065\047\070\064\071\001\002\000\016" +
    "\004\064\006\066\007\067\027\065\047\070\064\071\001" +
    "\002\000\016\004\064\006\066\007\067\027\065\047\070" +
    "\064\071\001\002\000\016\004\064\006\066\007\067\027" +
    "\065\047\070\064\071\001\002\000\064\004\uffb4\010\074" +
    "\013\uffb4\014\uffb4\015\uffb4\026\uffb4\030\uffb4\031\110\037" +
    "\uffb4\040\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\061\uffb4\062" +
    "\uffb4\065\uffb4\067\uffb4\071\uffb4\001\002\000\064\004\uffb9" +
    "\010\074\013\uffb9\014\uffb9\015\uffb9\026\uffb9\030\uffb9\031" +
    "\110\037\uffb9\040\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\061" +
    "\uffb9\062\uffb9\065\uffb9\067\uffb9\071\uffb9\001\002\000\064" +
    "\004\uffb7\010\074\013\uffb7\014\uffb7\015\uffb7\026\uffb7\030" +
    "\uffb7\031\110\037\uffb7\040\uffb7\046\uffb7\047\uffb7\050\uffb7" +
    "\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057" +
    "\uffb7\061\uffb7\062\uffb7\065\uffb7\067\uffb7\071\uffb7\001\002" +
    "\000\064\004\uffb5\010\074\013\uffb5\014\uffb5\015\uffb5\026" +
    "\uffb5\030\uffb5\031\110\037\uffb5\040\uffb5\046\uffb5\047\uffb5" +
    "\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\061\uffb5\062\uffb5\065\uffb5\067\uffb5\071\uffb5" +
    "\001\002\000\064\004\uffbe\010\074\013\uffbe\014\uffbe\015" +
    "\uffbe\026\uffbe\030\uffbe\031\110\037\uffbe\040\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\061\uffbe\062\uffbe\065\uffbe\067\uffbe" +
    "\071\uffbe\001\002\000\064\004\uffb8\010\074\013\uffb8\014" +
    "\uffb8\015\uffb8\026\uffb8\030\uffb8\031\110\037\uffb8\040\uffb8" +
    "\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054" +
    "\uffb8\055\uffb8\056\uffb8\057\uffb8\061\uffb8\062\uffb8\065\uffb8" +
    "\067\uffb8\071\uffb8\001\002\000\064\004\uffbd\010\074\013" +
    "\uffbd\014\uffbd\015\uffbd\026\uffbd\030\uffbd\031\110\037\uffbd" +
    "\040\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053" +
    "\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\061\uffbd\062\uffbd" +
    "\065\uffbd\067\uffbd\071\uffbd\001\002\000\064\004\uffc0\010" +
    "\074\013\uffc0\014\uffc0\015\uffc0\026\uffc0\030\uffc0\031\110" +
    "\037\uffc0\040\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\061\uffc0" +
    "\062\uffc0\065\uffc0\067\uffc0\071\uffc0\001\002\000\064\004" +
    "\uffb6\010\074\013\uffb6\014\uffb6\015\uffb6\026\uffb6\030\uffb6" +
    "\031\110\037\uffb6\040\uffb6\046\uffb6\047\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6" +
    "\061\uffb6\062\uffb6\065\uffb6\067\uffb6\071\uffb6\001\002\000" +
    "\064\004\uffb3\010\074\013\uffb3\014\uffb3\015\uffb3\026\uffb3" +
    "\030\uffb3\031\110\037\uffb3\040\uffb3\046\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\061\uffb3\062\uffb3\065\uffb3\067\uffb3\071\uffb3\001" +
    "\002\000\064\004\uffbb\010\074\013\uffbb\014\uffbb\015\uffbb" +
    "\026\uffbb\030\uffbb\031\110\037\uffbb\040\uffbb\046\uffbb\047" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb" +
    "\056\uffbb\057\uffbb\061\uffbb\062\uffbb\065\uffbb\067\uffbb\071" +
    "\uffbb\001\002\000\064\004\uffbc\010\074\013\uffbc\014\uffbc" +
    "\015\uffbc\026\uffbc\030\uffbc\031\110\037\uffbc\040\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\061\uffbc\062\uffbc\065\uffbc\067" +
    "\uffbc\071\uffbc\001\002\000\064\004\uffba\010\074\013\uffba" +
    "\014\uffba\015\uffba\026\uffba\030\uffba\031\110\037\uffba\040" +
    "\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba" +
    "\054\uffba\055\uffba\056\uffba\057\uffba\061\uffba\062\uffba\065" +
    "\uffba\067\uffba\071\uffba\001\002\000\064\004\uffbf\010\074" +
    "\013\uffbf\014\uffbf\015\uffbf\026\uffbf\030\uffbf\031\110\037" +
    "\uffbf\040\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf" +
    "\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\061\uffbf\062" +
    "\uffbf\065\uffbf\067\uffbf\071\uffbf\001\002\000\040\010\074" +
    "\014\103\026\076\031\110\046\102\047\073\050\105\051" +
    "\075\052\107\053\111\054\104\055\106\056\101\057\100" +
    "\065\131\001\002\000\064\004\uffc3\010\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\026\uffc3\030\uffc3\031\uffc3\037\uffc3\040\uffc3" +
    "\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054" +
    "\uffc3\055\uffc3\056\uffc3\057\uffc3\061\uffc3\062\uffc3\065\uffc3" +
    "\067\uffc3\071\uffc3\001\002\000\064\004\uffc2\010\074\013" +
    "\uffc2\014\uffc2\015\uffc2\026\uffc2\030\uffc2\031\110\037\uffc2" +
    "\040\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053" +
    "\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\061\uffc2\062\uffc2" +
    "\065\uffc2\067\uffc2\071\uffc2\001\002\000\064\004\uffc1\010" +
    "\074\013\uffc1\014\103\015\uffc1\026\076\030\uffc1\031\110" +
    "\037\uffc1\040\uffc1\046\102\047\073\050\105\051\075\052" +
    "\107\053\111\054\104\055\106\056\101\057\100\061\uffc1" +
    "\062\uffc1\065\uffc1\067\uffc1\071\uffc1\001\002\000\022\004" +
    "\153\006\066\007\067\027\065\047\070\061\151\064\071" +
    "\071\150\001\002\000\064\004\uffb0\010\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\026\uffb0\030\uffb0\031\uffb0\037\uffb0\040\uffb0" +
    "\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\055\uffb0\056\uffb0\057\uffb0\061\uffb0\062\uffb0\065\uffb0" +
    "\067\uffb0\071\uffb0\001\002\000\064\004\uffb2\010\uffb2\013" +
    "\uffb2\014\uffb2\015\uffb2\026\uffb2\030\uffb2\031\uffb2\037\uffb2" +
    "\040\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053" +
    "\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\061\uffb2\062\uffb2" +
    "\065\uffb2\067\uffb2\071\uffb2\001\002\000\020\004\064\006" +
    "\066\007\067\027\065\047\070\064\071\065\142\001\002" +
    "\000\064\004\uffb1\010\uffb1\013\uffb1\014\uffb1\015\uffb1\026" +
    "\uffb1\030\uffb1\031\uffb1\037\uffb1\040\uffb1\046\uffb1\047\uffb1" +
    "\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\057\uffb1\061\uffb1\062\uffb1\065\uffb1\067\uffb1\071\uffb1" +
    "\001\002\000\042\010\074\014\103\026\076\031\110\046" +
    "\102\047\073\050\105\051\075\052\107\053\111\054\104" +
    "\055\106\056\101\057\100\062\uffa7\065\uffa7\001\002\000" +
    "\064\004\uffa9\010\uffa9\013\uffa9\014\uffa9\015\uffa9\026\uffa9" +
    "\030\uffa9\031\uffa9\037\uffa9\040\uffa9\046\uffa9\047\uffa9\050" +
    "\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9" +
    "\057\uffa9\061\uffa9\062\uffa9\065\uffa9\067\uffa9\071\uffa9\001" +
    "\002\000\006\062\144\065\145\001\002\000\016\004\064" +
    "\006\066\007\067\027\065\047\070\064\071\001\002\000" +
    "\064\004\uffaa\010\uffaa\013\uffaa\014\uffaa\015\uffaa\026\uffaa" +
    "\030\uffaa\031\uffaa\037\uffaa\040\uffaa\046\uffaa\047\uffaa\050" +
    "\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa" +
    "\057\uffaa\061\uffaa\062\uffaa\065\uffaa\067\uffaa\071\uffaa\001" +
    "\002\000\042\010\074\014\103\026\076\031\110\046\102" +
    "\047\073\050\105\051\075\052\107\053\111\054\104\055" +
    "\106\056\101\057\100\062\uffa8\065\uffa8\001\002\000\006" +
    "\062\uff9e\071\uff9e\001\002\000\064\004\uffa0\010\uffa0\013" +
    "\uffa0\014\uffa0\015\uffa0\026\uffa0\030\uffa0\031\uffa0\037\uffa0" +
    "\040\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053" +
    "\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\061\uffa0\062\uffa0" +
    "\065\uffa0\067\uffa0\071\uffa0\001\002\000\004\004\171\001" +
    "\002\000\044\010\074\014\103\026\076\030\167\031\110" +
    "\046\102\047\073\050\105\051\075\052\107\053\111\054" +
    "\104\055\106\056\101\057\100\062\uff9c\071\uff9c\001\002" +
    "\000\056\010\uffaf\014\uffaf\026\uffaf\030\uffaf\031\uffaf\045" +
    "\162\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf" +
    "\054\uffaf\055\uffaf\056\uffaf\057\uffaf\062\uffaf\063\uffaf\064" +
    "\137\066\uffaf\070\134\071\uffaf\001\002\000\006\062\165" +
    "\071\164\001\002\000\010\004\uffa4\061\uffa4\071\uffa4\001" +
    "\002\000\010\004\160\061\151\071\157\001\002\000\064" +
    "\004\uffa6\010\uffa6\013\uffa6\014\uffa6\015\uffa6\026\uffa6\030" +
    "\uffa6\031\uffa6\037\uffa6\040\uffa6\046\uffa6\047\uffa6\050\uffa6" +
    "\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057" +
    "\uffa6\061\uffa6\062\uffa6\065\uffa6\067\uffa6\071\uffa6\001\002" +
    "\000\004\045\162\001\002\000\010\004\uffa5\061\uffa5\071" +
    "\uffa5\001\002\000\016\004\064\006\066\007\067\027\065" +
    "\047\070\064\071\001\002\000\044\004\uffa2\010\074\014" +
    "\103\026\076\031\110\046\102\047\073\050\105\051\075" +
    "\052\107\053\111\054\104\055\106\056\101\057\100\061" +
    "\uffa2\071\uffa2\001\002\000\064\004\uffa1\010\uffa1\013\uffa1" +
    "\014\uffa1\015\uffa1\026\uffa1\030\uffa1\031\uffa1\037\uffa1\040" +
    "\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1" +
    "\054\uffa1\055\uffa1\056\uffa1\057\uffa1\061\uffa1\062\uffa1\065" +
    "\uffa1\067\uffa1\071\uffa1\001\002\000\016\004\064\006\066" +
    "\007\067\027\065\047\070\064\071\001\002\000\006\062" +
    "\uff9f\071\uff9f\001\002\000\016\004\064\006\066\007\067" +
    "\027\065\047\070\064\071\001\002\000\042\010\074\014" +
    "\103\026\076\031\110\046\102\047\073\050\105\051\075" +
    "\052\107\053\111\054\104\055\106\056\101\057\100\062" +
    "\uff9d\071\uff9d\001\002\000\004\045\172\001\002\000\016" +
    "\004\064\006\066\007\067\027\065\047\070\064\071\001" +
    "\002\000\044\004\uffa3\010\074\014\103\026\076\031\110" +
    "\046\102\047\073\050\105\051\075\052\107\053\111\054" +
    "\104\055\106\056\101\057\100\061\uffa3\071\uffa3\001\002" +
    "\000\040\010\074\014\103\026\076\031\110\046\102\047" +
    "\073\050\105\051\075\052\107\053\111\054\104\055\106" +
    "\056\101\057\100\067\175\001\002\000\072\004\uffae\010" +
    "\uffae\013\uffae\014\uffae\015\uffae\026\uffae\030\uffae\031\uffae" +
    "\037\uffae\040\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051" +
    "\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae" +
    "\061\uffae\062\uffae\063\uffae\065\uffae\066\uffae\067\uffae\071" +
    "\uffae\001\002\000\034\004\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\025\uffd3\034\uffd3\036\uffd3\043" +
    "\uffd3\044\uffd3\061\uffd3\001\002\000\040\010\074\014\103" +
    "\026\076\031\110\046\102\047\073\050\105\051\075\052" +
    "\107\053\111\054\104\055\106\056\101\057\100\061\200" +
    "\001\002\000\034\004\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\025\uffd4\034\uffd4\036\uffd4\043\uffd4" +
    "\044\uffd4\061\uffd4\001\002\000\034\004\uffd2\016\uffd2\017" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\025\uffd2\034\uffd2" +
    "\036\uffd2\043\uffd2\044\uffd2\061\uffd2\001\002\000\004\061" +
    "\uffff\001\002\000\004\061\215\001\002\000\022\004\064" +
    "\005\205\006\066\007\067\027\065\047\070\064\071\065" +
    "\207\001\002\000\006\062\uffc8\065\uffc8\001\002\000\042" +
    "\010\074\014\103\026\076\031\110\046\102\047\073\050" +
    "\105\051\075\052\107\053\111\054\104\055\106\056\101" +
    "\057\100\062\uffc7\065\uffc7\001\002\000\004\061\uffcb\001" +
    "\002\000\006\062\uffc9\065\uffc9\001\002\000\006\062\212" +
    "\065\213\001\002\000\020\004\064\005\205\006\066\007" +
    "\067\027\065\047\070\064\071\001\002\000\004\061\uffcc" +
    "\001\002\000\006\062\uffca\065\uffca\001\002\000\034\004" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\025\uffdc\034\uffdc\036\uffdc\043\uffdc\044\uffdc\061\uffdc\001" +
    "\002\000\004\061\217\001\002\000\034\004\uffde\016\uffde" +
    "\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\025\uffde\034" +
    "\uffde\036\uffde\043\uffde\044\uffde\061\uffde\001\002\000\040" +
    "\010\074\014\103\026\076\031\110\037\221\046\102\047" +
    "\073\050\105\051\075\052\107\053\111\054\104\055\106" +
    "\056\101\057\100\001\002\000\032\004\051\016\uffcd\017" +
    "\uffcd\020\uffcd\021\044\022\046\023\050\025\047\034\043" +
    "\036\055\043\045\044\052\001\002\000\010\016\225\017" +
    "\226\020\227\001\002\000\010\016\uffcf\017\uffcf\020\uffcf" +
    "\001\002\000\034\004\051\016\uffce\017\uffce\020\uffce\021" +
    "\044\022\046\023\050\025\047\034\043\036\055\043\045" +
    "\044\052\061\uffce\001\002\000\026\004\051\020\uffcd\021" +
    "\044\022\046\023\050\025\047\034\043\036\055\043\045" +
    "\044\052\001\002\000\016\004\064\006\066\007\067\027" +
    "\065\047\070\064\071\001\002\000\026\004\051\021\044" +
    "\022\046\023\050\025\047\034\043\036\055\043\045\044" +
    "\052\061\uffcd\001\002\000\004\061\231\001\002\000\034" +
    "\004\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\025\uffda\034\uffda\036\uffda\043\uffda\044\uffda\061\uffda" +
    "\001\002\000\040\010\074\014\103\026\076\031\110\037" +
    "\233\046\102\047\073\050\105\051\075\052\107\053\111" +
    "\054\104\055\106\056\101\057\100\001\002\000\032\004" +
    "\051\016\uffcd\017\uffcd\020\uffcd\021\044\022\046\023\050" +
    "\025\047\034\043\036\055\043\045\044\052\001\002\000" +
    "\010\016\uffd0\017\uffd0\020\uffd0\001\002\000\004\020\236" +
    "\001\002\000\004\061\237\001\002\000\034\004\uffdb\016" +
    "\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\025\uffdb" +
    "\034\uffdb\036\uffdb\043\uffdb\044\uffdb\061\uffdb\001\002\000" +
    "\004\020\241\001\002\000\004\061\242\001\002\000\034" +
    "\004\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\025\uffd8\034\uffd8\036\uffd8\043\uffd8\044\uffd8\061\uffd8" +
    "\001\002\000\004\045\244\001\002\000\016\004\064\006" +
    "\066\007\067\027\065\047\070\064\071\001\002\000\040" +
    "\010\074\014\103\026\076\031\110\040\246\046\102\047" +
    "\073\050\105\051\075\052\107\053\111\054\104\055\106" +
    "\056\101\057\100\001\002\000\016\004\064\006\066\007" +
    "\067\027\065\047\070\064\071\001\002\000\042\010\074" +
    "\013\250\014\103\015\251\026\076\031\110\046\102\047" +
    "\073\050\105\051\075\052\107\053\111\054\104\055\106" +
    "\056\101\057\100\001\002\000\016\004\064\006\066\007" +
    "\067\027\065\047\070\064\071\001\002\000\026\004\051" +
    "\020\uffcd\021\044\022\046\023\050\025\047\034\043\036" +
    "\055\043\045\044\052\001\002\000\004\020\253\001\002" +
    "\000\004\061\254\001\002\000\034\004\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\025\uffd6\034\uffd6" +
    "\036\uffd6\043\uffd6\044\uffd6\061\uffd6\001\002\000\040\010" +
    "\074\014\103\015\256\026\076\031\110\046\102\047\073" +
    "\050\105\051\075\052\107\053\111\054\104\055\106\056" +
    "\101\057\100\001\002\000\026\004\051\020\uffcd\021\044" +
    "\022\046\023\050\025\047\034\043\036\055\043\045\044" +
    "\052\001\002\000\004\020\260\001\002\000\004\061\261" +
    "\001\002\000\034\004\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\025\uffd7\034\uffd7\036\uffd7\043\uffd7" +
    "\044\uffd7\061\uffd7\001\002\000\040\010\074\014\103\015" +
    "\263\026\076\031\110\046\102\047\073\050\105\051\075" +
    "\052\107\053\111\054\104\055\106\056\101\057\100\001" +
    "\002\000\026\004\051\020\uffcd\021\044\022\046\023\050" +
    "\025\047\034\043\036\055\043\045\044\052\001\002\000" +
    "\004\020\265\001\002\000\004\061\266\001\002\000\034" +
    "\004\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\025\uffd9\034\uffd9\036\uffd9\043\uffd9\044\uffd9\061\uffd9" +
    "\001\002\000\034\004\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\025\uffd5\034\uffd5\036\uffd5\043\uffd5" +
    "\044\uffd5\061\uffd5\001\002\000\004\004\272\001\002\000" +
    "\012\062\uffab\063\061\065\uffab\066\057\001\002\000\012" +
    "\062\uffaf\063\uffaf\065\uffaf\066\uffaf\001\002\000\006\062" +
    "\274\065\275\001\002\000\004\004\272\001\002\000\004" +
    "\061\276\001\002\000\034\004\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\025\uffdd\034\uffdd\036\uffdd" +
    "\043\uffdd\044\uffdd\061\uffdd\001\002\000\012\062\uffac\063" +
    "\061\065\uffac\066\057\001\002\000\004\064\307\001\002" +
    "\000\014\010\304\012\uffef\032\uffef\041\uffef\042\uffef\001" +
    "\002\000\014\010\uffeb\012\uffeb\032\uffeb\041\uffeb\042\uffeb" +
    "\001\002\000\012\012\ufffc\032\ufffc\041\ufffc\042\ufffc\001" +
    "\002\000\004\004\300\001\002\000\014\010\uffec\012\uffec" +
    "\032\uffec\041\uffec\042\uffec\001\002\000\006\024\325\060" +
    "\324\001\002\000\006\004\310\065\312\001\002\000\010" +
    "\045\ufff4\060\ufff4\062\ufff4\001\002\000\006\061\322\065" +
    "\321\001\002\000\006\024\uffe3\060\uffe3\001\002\000\006" +
    "\061\uffe0\065\uffe0\001\002\000\006\060\316\062\315\001" +
    "\002\000\004\004\320\001\002\000\004\004\030\001\002" +
    "\000\006\061\uffe2\065\uffe2\001\002\000\010\045\ufff5\060" +
    "\ufff5\062\ufff5\001\002\000\006\024\uffe4\060\uffe4\001\002" +
    "\000\004\004\310\001\002\000\006\061\uffe1\065\uffe1\001" +
    "\002\000\004\004\030\001\002\000\012\012\ufffb\032\ufffb" +
    "\041\ufffb\042\ufffb\001\002\000\004\061\327\001\002\000" +
    "\014\010\uffed\012\uffed\032\uffed\041\uffed\042\uffed\001\002" +
    "\000\004\024\331\001\002\000\012\012\ufffb\032\ufffb\041" +
    "\ufffb\042\ufffb\001\002\000\004\061\333\001\002\000\014" +
    "\010\uffee\012\uffee\032\uffee\041\uffee\042\uffee\001\002\000" +
    "\012\012\ufffe\032\ufffe\041\ufffe\042\ufffe\001\002\000\010" +
    "\045\342\060\341\062\315\001\002\000\014\004\310\012" +
    "\ufffa\032\ufffa\041\ufffa\042\ufffa\001\002\000\014\004\ufff6" +
    "\012\ufff6\032\ufff6\041\ufff6\042\ufff6\001\002\000\014\004" +
    "\ufff7\012\ufff7\032\ufff7\041\ufff7\042\ufff7\001\002\000\004" +
    "\004\030\001\002\000\016\004\064\006\066\007\067\027" +
    "\065\047\070\064\071\001\002\000\040\010\074\014\103" +
    "\026\076\031\110\046\102\047\073\050\105\051\075\052" +
    "\107\053\111\054\104\055\106\056\101\057\100\061\344" +
    "\001\002\000\014\004\ufff8\012\ufff8\032\ufff8\041\ufff8\042" +
    "\ufff8\001\002\000\004\045\346\001\002\000\016\004\064" +
    "\006\066\007\067\027\065\047\070\064\071\001\002\000" +
    "\040\010\074\014\103\026\076\031\110\046\102\047\073" +
    "\050\105\051\075\052\107\053\111\054\104\055\106\056" +
    "\101\057\100\061\350\001\002\000\014\004\ufff9\012\ufff9" +
    "\032\ufff9\041\ufff9\042\ufff9\001\002\000\004\002\000\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\006\020\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\336\024\335\025" +
    "\334\046\333\001\001\000\010\005\301\027\300\045\302" +
    "\001\001\000\010\015\052\021\053\043\055\001\001\000" +
    "\010\004\015\026\016\044\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\021\001\001\000\002\001\001\000\004\042\024" +
    "\001\001\000\006\010\033\031\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\261\043\062\001\001\000\002\001" +
    "\001\000\012\015\052\016\237\021\223\043\055\001\001" +
    "\000\006\013\217\043\062\001\001\000\004\023\215\001" +
    "\001\000\004\040\202\001\001\000\002\001\001\000\006" +
    "\015\200\043\055\001\001\000\006\013\176\043\062\001" +
    "\001\000\002\001\001\000\006\013\173\043\062\001\001" +
    "\000\006\013\071\043\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\134\023\135" +
    "\041\137\001\001\000\006\013\132\043\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\131\043\062" +
    "\001\001\000\006\013\127\043\062\001\001\000\002\001" +
    "\001\000\006\013\126\043\062\001\001\000\006\013\125" +
    "\043\062\001\001\000\006\013\124\043\062\001\001\000" +
    "\006\013\123\043\062\001\001\000\002\001\001\000\006" +
    "\013\122\043\062\001\001\000\006\013\121\043\062\001" +
    "\001\000\006\013\120\043\062\001\001\000\006\013\117" +
    "\043\062\001\001\000\006\013\116\043\062\001\001\000" +
    "\006\013\115\043\062\001\001\000\006\013\114\043\062" +
    "\001\001\000\006\013\113\043\062\001\001\000\006\013" +
    "\112\043\062\001\001\000\006\013\111\043\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\007\146\011\154" +
    "\013\151\036\153\037\155\043\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\140\035\142\043\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\145\043\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\134\023\135\041\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\162\043" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\165\013\151\043\062\001\001\000\002\001\001\000" +
    "\006\013\167\043\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\172\043\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\205\014\207" +
    "\034\210\043\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\205\014\213\043\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\052\016" +
    "\222\017\221\021\223\043\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\200\043\055\001\001\000" +
    "\012\015\052\016\234\021\223\043\055\001\001\000\006" +
    "\013\231\043\062\001\001\000\012\015\052\016\227\021" +
    "\223\043\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\052\016\233\021\223\043" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\244" +
    "\043\062\001\001\000\002\001\001\000\006\013\246\043" +
    "\062\001\001\000\002\001\001\000\006\013\254\043\062" +
    "\001\001\000\012\015\052\016\251\021\223\043\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\052\016\256\021\223\043" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\052\016\263\021" +
    "\223\043\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\272\043" +
    "\270\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\276\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\304\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\312\025\313\032\310\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\316\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\322\025\313\001\001\000\002\001\001\000" +
    "\004\047\327\001\001\000\006\012\325\020\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\331\020\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\337\025\334\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\344\001\001\000\006\013\342\043\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\346\043\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PcatParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PcatParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PcatParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    static int[] tokens = {
      sym.error, sym.ID, sym.STRING_LITERAL, sym.INTEGER_LITERAL, sym.REAL_LITERAL,
      sym.AND, sym.ARRAY, sym.BEGIN, sym.BY, sym.DIV, sym.DO, sym.ELSE, sym.ELSIF, sym.END,
      sym.EXIT, sym.FOR, sym.IF, sym.IS, sym.LOOP, sym.MOD, sym.NOT, sym.OF, sym.OR,
      sym.PROCEDURE, sym.PROGRAM, sym.READ, sym.RECORD, sym.RETURN, sym.THEN, sym.TO,
      sym.TYPE, sym.VAR, sym.WHILE, sym.WRITE, sym.ASGN, sym.PLUS, sym.MINUS, sym.TIMES, sym.SLASH,
      sym.LT, sym.LEQ, sym.GT, sym.GEQ, sym.EQ, sym.NEQ, sym.COLON, sym.SEMI, sym.COMMA, sym.DOT,
      sym.LPAREN, sym.RPAREN, sym.LSQBRA, sym.RSQBRA, sym.LCUBRA, sym.RCUBRA
    };

    static String[] token_names = {
      "error", "ID", "STRING_LITERAL", "INTEGER_LITERAL", "REAL_LITERAL",
      "AND", "ARRAY", "BEGIN", "BY", "DIV", "DO", "ELSE", "ELSIF", "END",
      "EXIT", "FOR", "IF", "IS", "LOOP", "MOD", "NOT", "OF", "OR",
      "PROCEDURE", "PROGRAM", "READ", "RECORD", "RETURN", "THEN", "TO",
      "TYPE", "VAR", "WHILE", "WRITE", "ASGN :=", "PLUS +", "MINUS -", "TIMES *", "SLASH /",
      "LT <", "LEQ <=", "GT >", "GEQ >=", "EQ =", "NEQ <>", "COLON :", "SEMI ;", "COMMA ,", "DOT .",
      "LPAREN (", "RPAREN )", "LSQBRA [", "RSQBRA ]", "LCUBRA "+'{', "RCUBRA "+'}'
    };

    public static String print ( Symbol s ) {
        for ( int i = 0; i < tokens.length; i++ ) {
            if (tokens[i] == s.sym) {
                String res = token_names[i] + " ";
                if (s.value == null)
                    return res;
                else if (s.value instanceof Integer)
                    return res + ((Integer) s.value).intValue();
                else if (s.value instanceof Float)
                    return res + ((Float) s.value).floatValue();
                else if (s.value instanceof String)
                    return res + "\"" + (String) s.value + "\"";
            }
        };
        return "?";
    }

    public void syntax_error ( Symbol token ) {
        System.err.println("*** Syntax Error: " + print(token) + " (line: " + token.left
                           + ", column: " + token.right + ")");
        System.exit(1);
    }

    /** nil is the empty list */
    final static List nil = Nil$.MODULE$;

    /** Append list2 at the end of list1 (ie, return a new list containing
        the elements from list1 followed by the elements from list2) */
    static<T> List<T> append ( List<T> list1, List<T> list2 ) {
        return list1.$colon$colon$colon(list2);
    }

    /** append the element elem at the end of the list
       (ie, return a new list containing the list followed by the elem) */
    static<T> List<T> append ( List<T> list, T elem ) {
        return nil.$colon$colon(elem).$colon$colon$colon(list);
    }

    /** Insert the element elem at the beginning of the list
        (ie, return a new list containing the elem followed by the list) */
    static<T> List<T> add ( T elem, List<T> list ) {
        return list.$colon$colon(elem);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PcatParser$actions {
  private final PcatParser parser;

  /** Constructor */
  CUP$PcatParser$actions(PcatParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PcatParser$do_action_part00000000(
    int                        CUP$PcatParser$act_num,
    java_cup.runtime.lr_parser CUP$PcatParser$parser,
    java.util.Stack            CUP$PcatParser$stack,
    int                        CUP$PcatParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PcatParser$result;

      /* select the action based on the action number */
      switch (CUP$PcatParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;
		RESULT = start_val;
              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PcatParser$parser.done_parsing();
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PROGRAM IS body SEMI 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)).value;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // body ::= declaration BEGIN statement_l END 
            {
              Body RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("body",8, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration ::= declaration VAR var_decls 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= declaration TYPE type_decls 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= declaration PROCEDURE procedure_decls 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_decls ::= var_declo 
            {
              VarDecls RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decls",36, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_decl ::= var_decl1 COLON typename ASGN expression SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl",1, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_decl ::= var_decl1 ASGN expression SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl",1, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_declo ::= var_declo var_decl 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_declo",18, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_declo ::= var_decl 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_declo",18, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_decl1 ::= var_decl1 COMMA ID 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl1",19, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_decl1 ::= ID 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("var_decl1",19, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_decls ::= type_decl2 
            {
              TypeDecls RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_decls",34, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type_decl ::= ID IS type SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_decl",2, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type_decl2 ::= type_decl2 AND type_decl 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_decl2",20, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type_decl2 ::= type_decl 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type_decl2",20, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // procedure_decls ::= procedure_decl3 
            {
              ProcDecls RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decls",35, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedure_decl ::= ID formal_params COLON typename IS body SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decl",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedure_decl ::= ID formal_params IS body SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decl",3, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procedure_decl3 ::= procedure_decl3 AND procedure_decl 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decl3",21, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procedure_decl3 ::= procedure_decl 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("procedure_decl3",21, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // typename ::= ID 
            {
              String RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("typename",37, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= ARRAY OF typename 
            {
              Type RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type",32, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= RECORD component1 END 
            {
              Type RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("type",32, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // component1 ::= component1 component2 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("component1",23, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // component1 ::= component2 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("component1",23, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // component2 ::= ID COLON typename SEMI 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("component2",6, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // formal_params ::= LPAREN fp_section_4 RPAREN 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("formal_params",22, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // formal_params ::= LPAREN RPAREN 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("formal_params",22, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // fp_section ::= var_decl1 COLON typename 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("fp_section",4, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // fp_section_4 ::= fp_section_4 SEMI fp_section 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("fp_section_4",24, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // fp_section_4 ::= fp_section 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("fp_section_4",24, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= lvalue ASGN expression SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= ID actual_params SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= READ LPAREN lvalue5 RPAREN SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= WRITE write_params SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= IF expression THEN statement6 ELSE statement_r END SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-7)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= IF expression THEN statement6 END statement_r SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-6)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= WHILE expression DO statement_r END SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-5)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= LOOP statement_r END SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= FOR ID ASGN expression TO expression BY expression DO statement_r END SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-11)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= FOR ID ASGN expression TO expression DO statement_r END SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-9)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= EXIT SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= RETURN expression SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= RETURN SEMI 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement_l ::= statement_l statement 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement_l",15, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement_l ::= statement 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement_l",15, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement6 ::= statement6 ELSIF expression THEN statement_r 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement6",13, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-4)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement6 ::= statement_r 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement6",13, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement_r ::= statement_l 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement_r",12, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement_r ::= 
            {
              Stmt RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("statement_r",12, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // write_params ::= LPAREN write_params7 RPAREN 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_params",30, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // write_params ::= LPAREN RPAREN 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_params",30, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // write_params7 ::= write_params7 COMMA write_expr 
            {
              List RESULT =null;
		int wexpleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int wexpright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr wexp = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_params7",26, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // write_params7 ::= write_expr 
            {
              List RESULT =null;
		int wexpleft = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).left;
		int wexpright = ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()).right;
		Expr wexp = (Expr)((java_cup.runtime.Symbol) CUP$PcatParser$stack.peek()).value;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_params7",26, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // write_expr ::= STRING_LITERAL 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_expr",10, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // write_expr ::= expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("write_expr",10, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= INTEGER_LITERAL 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= REAL_LITERAL 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= lvalue 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= LPAREN expression RPAREN 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= MINUS expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= NOT expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= expression PLUS expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= expression MINUS expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= expression TIMES expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= expression DIV expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= expression SLASH expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= expression MOD expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= expression AND expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= expression OR expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= expression GT expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expression LT expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= expression EQ expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= expression GEQ expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= expression LEQ expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= expression NEQ expression 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= ID actual_params 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= ID record_inits 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= ID array_inits 
            {
              Expr RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // lvalue ::= ID 
            {
              Lvalue RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalue",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // lvalue ::= lvalue LSQBRA expression RSQBRA 
            {
              Lvalue RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalue",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lvalue ::= lvalue DOT ID 
            {
              Lvalue RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalue",33, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lvalue5 ::= lvalue5 COMMA lvalue 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalue5",25, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lvalue5 ::= lvalue 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("lvalue5",25, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // actual_params ::= LPAREN actual_params8 RPAREN 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_params",17, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // actual_params ::= LPAREN RPAREN 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_params",17, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // actual_params8 ::= actual_params8 COMMA expression 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_params8",27, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // actual_params8 ::= expression 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("actual_params8",27, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // record_inits ::= LCUBRA record_inits1 RCUBRA 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("record_inits",31, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // record_inits1 ::= record_inits1 record_inits2 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("record_inits1",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // record_inits1 ::= record_inits2 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("record_inits1",29, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // record_inits2 ::= SEMI ID ASGN expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("record_inits2",7, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-3)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // record_inits2 ::= ID ASGN expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("record_inits2",7, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // array_inits ::= LCUBRA array_inits9 RCUBRA 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_inits",16, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // array_inits ::= LCUBRA RCUBRA 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_inits",16, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-1)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // array_inits9 ::= array_inits9 COMMA array_init 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_inits9",28, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // array_inits9 ::= array_init 
            {
              List RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_inits9",28, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // array_init ::= expression OF expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_init",5, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.elementAt(CUP$PcatParser$top-2)), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // array_init ::= expression 
            {
              Object RESULT =null;

              CUP$PcatParser$result = parser.getSymbolFactory().newSymbol("array_init",5, ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PcatParser$stack.peek()), RESULT);
            }
          return CUP$PcatParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PcatParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PcatParser$do_action(
    int                        CUP$PcatParser$act_num,
    java_cup.runtime.lr_parser CUP$PcatParser$parser,
    java.util.Stack            CUP$PcatParser$stack,
    int                        CUP$PcatParser$top)
    throws java.lang.Exception
    {
              return CUP$PcatParser$do_action_part00000000(
                               CUP$PcatParser$act_num,
                               CUP$PcatParser$parser,
                               CUP$PcatParser$stack,
                               CUP$PcatParser$top);
    }
}

}
